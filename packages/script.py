import os
import json
from pathlib import Path
import tempfile
import zipfile
import tarfile
import uuid
import boto3
import re
import sys
import hashlib
from datetime import datetime

import import_tests

def normalize(name):
    return re.sub(r"[-_.]+", "-", name).lower()

# See setup.sh
# prerequisite: emsdk, pyodide, packages -> pyodide/packages

def gen_bzl_config(tag, dist):
    bucket_url = "https://pyodide.runtime-playground.workers.dev/python-package-bucket/" + tag + "/"
    github_url = "https://github.com/cloudflare/pyodide-build-scripts/releases/download/" + tag + "/"
    lock_bytes = (dist / "pyodide-lock.json").read_bytes()
    lock_hash = hashlib.sha256(lock_bytes).hexdigest()
    zip_bytes = (dist / "pyodide_packages.tar.zip").read_bytes()
    zip_hash = hashlib.sha256(zip_bytes).hexdigest()
    all_wheels_bytes = (dist / "all_wheels.zip").read_bytes()
    all_wheels_hash = hashlib.sha256(all_wheels_bytes).hexdigest()

    with open(dist / "pyodide-lock.json", "r") as file:
        lock = json.load(file)
        packages = [package["name"] for package in lock["packages"].values()]
        imports_to_test = import_tests.gen(packages)

    with open("pyodide_bucket.bzl", "w") as f:
        f.write("# Do not edit this file by hand. See docs/pyodide.md for info on how to generate it.\n")
        f.write("# These variables are factored out here because they are being shared by the WORKSPACE files in\n")
        f.write("# both edgeworker and workerd, as well as src/pyodide/BUILD.bazel\n")
        f.write("PYODIDE_PACKAGE_BUCKET_URL = \"" + bucket_url + "\"\n")
        f.write("PYODIDE_GITHUB_RELEASE_URL = \"" + github_url + "\"\n")
        f.write("PYODIDE_LOCK_SHA256 = \"" + lock_hash + "\"\n")
        f.write("PYODIDE_PACKAGES_TAR_ZIP_SHA256 = \"" + zip_hash + "\"\n")
        f.write("PYODIDE_ALL_WHEELS_ZIP_SHA256 = \"" + all_wheels_hash + "\"\n\n")
        f.write("# IMPORTANT: when updating this file in git, check the diff to make sure none of the imports below are being removed unexpectedly\n")
        f.write("PYODIDE_IMPORTS_TO_TEST = " + json.dumps(imports_to_test, indent=3, sort_keys=True) + "\n")

# creates a package bundle .tar.zip file to be bundled in with edgeworker
# the resulting bundle is written to dist/pyodide_packages.tar.zip
def make_bundle(tag, dist = Path("dist")):
    with open(dist / "pyodide-lock.json", "r") as file:
        lock = json.load(file)
    with tempfile.TemporaryDirectory(delete=False) as t:
        tempdir = Path(t)
        print("making bundle in " + str(tempdir))
        # copy pyodide-lock.json into tempdir
        with open(tempdir / "pyodide-lock.json", "w") as file:
            json.dump(lock, file)
        for package in lock["packages"].values():
            name = normalize(package["name"])
            print("untarring " + name)
            os.mkdir(tempdir / name)
            if name.endswith("-tests") or name == "test": 
                continue
            file = dist / package["file_name"]
            with tarfile.open(file, "r:gz") as zip:
                zip.extractall(tempdir / name)
        # create temp tarfile from tempdir
        with tarfile.open(tempdir / "pyodide_packages.tar", "w") as tar:
            tar.add(tempdir, arcname="./")
        # create zip file in dist/ from tarfile
        with zipfile.ZipFile(dist / "pyodide_packages.tar.zip", "w", compression=zipfile.ZIP_DEFLATED) as zip:
            zip.write(tempdir / "pyodide_packages.tar", "pyodide_packages.tar")
        # create all_wheels.zip file for testing
        with zipfile.ZipFile(dist / "all_wheels.zip", "w", compression=zipfile.ZIP_DEFLATED) as zip:
            for package in lock["packages"].values():
                file = dist / package["file_name"]
                zip.write(file, f"{package['file_name']}")
    
    gen_bzl_config(tag, dist)

# uploads everything in dist to python-package-bucket at tag/...
def upload_to_r2(tag, dist = Path("dist")):
    # upload to r2
    s3 = boto3.client("s3", 
                      endpoint_url = "https://" + os.environ.get("R2_ACCOUNT_ID") + ".r2.cloudflarestorage.com",
                      aws_access_key_id = os.environ.get("R2_ACCESS_KEY_ID"),
                      aws_secret_access_key = os.environ.get("R2_SECRET_ACCESS_KEY"),
                      region_name="auto")
    
    # upload entire dist directory to r2
    for root, dirs, files in os.walk(dist):
        for file in files:
            path = Path(root) / file
            key = tag + "/" + str(path.relative_to(dist))
            print(f"uploading {path} to {key}")
            s3.upload_file(str(path), "python-package-bucket", key)

# converts all the .zip wheels into .tar.gz format (destructively)
def convert_wheels_to_tar_gz(dist = Path("dist")):
    with open(dist / "pyodide-lock.json", "r") as file:
        lock = json.load(file)
    
    for package in lock["packages"].values():
        name = normalize(package["name"])
        file = dist / package["file_name"]
        # check file ends with .zip or .whl
        if not (file.name.endswith(".zip") or file.name.endswith(".whl")):
            continue
        new_file = file.with_suffix(".tar.gz")
        print("Converting zip file " + str(file) + " to .tar.gz format")
        with zipfile.ZipFile(file, "r") as zip:
            with tempfile.TemporaryDirectory() as t:
                tempdir = Path(t)
                zip.extractall(tempdir)
                # create tar.gz file from tempdir
                with tarfile.open(new_file, "w:gz") as tar:
                    tar.add(tempdir, arcname="./")
        os.remove(file)
        package["file_name"] = new_file.name
        # update sha256 hash
        new_file_bytes = new_file.read_bytes()
        new_file_hash = hashlib.sha256(new_file_bytes).hexdigest()
        package["sha256"] = new_file_hash
    
    with open(dist / "pyodide-lock.json", "w") as file:
        json.dump(lock, file)

if __name__ == "__main__":
    if len(sys.argv) != 2:
        print("Usage: python script.py <tag>")
        sys.exit(1)
    tag = sys.argv[1]

    with open("required_packages.txt", "r") as file:
        required_packages = file.read().split("\n")
    status = os.system(f"pyodide build-recipes --install {' '.join(required_packages)}")
    if status != 0:
        raise Exception("Failed to build recipes")
    
    convert_wheels_to_tar_gz()
    
    make_bundle(tag)
    upload_to_r2(tag)